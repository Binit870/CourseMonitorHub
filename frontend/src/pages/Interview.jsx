import React, { useState } from "react";

// --- COMPANY DATA (Static Information) ---
const companies = [
Â  {
Â  Â  name: "Google",
Â  Â  eligibility:
Â  Â  Â  "Bachelor's degree in Computer Science or related technical field, or equivalent practical experience. Strong knowledge of data structures, algorithms, and software design.",
Â  Â  process: [
Â  Â  Â  {
Â  Â  Â  Â  round: "Online Assessment",
Â  Â  Â  Â  description: "Coding test with algorithm and data structure questions on platforms like HackerRank.",
Â  Â  Â  },
Â  Â  Â  {
Â  Â  Â  Â  round: "Technical Round 1",
Â  Â  Â  Â  description: "Problem-solving and coding interview. Expect medium to hard difficulty LeetCode-style questions.",
Â  Â  Â  },
Â  Â  Â  {
Â  Â  Â  Â  round: "Technical Round 2",
Â  Â  Â  Â  description: "System design and in-depth problem-solving. May include domain-specific questions.",
Â  Â  Â  },
Â  Â  Â  {
Â  Â  Â  Â  round: "HR Round",
Â  Â  Â  Â  description: "Behavioral questions, past project discussions, and cultural fit assessment.",
Â  Â  Â  },
Â  Â  ],
Â  Â  questions: [
Â  Â  Â  Â  { q: "How does Google search work?", a: "It involves crawling the web, indexing content, and serving results based on a complex ranking algorithm (like PageRank)." },
Â  Â  Â  Â  { q: "Design a system like Google Docs.", a: "Focus on real-time collaboration, data storage, conflict resolution (CRDTs or Operational Transforms), and scalability." },
Â  Â  Â  Â  { q: "Find the k-th largest element in an array.", a: "Explain solutions using sorting (O(n log n)) and a min-heap or Quickselect algorithm (average O(n))." },
Â  Â  ],
Â  },
Â  {
Â  Â  name: "Amazon",
Â  Â  eligibility: "Currently enrolled in or recently graduated from a Bachelor's or Master's degree program in Computer Science, Engineering, or a related field. Customer-obsessed mindset.",
Â  Â  process: [
Â  Â  Â  {
Â  Â  Â  Â  round: "Online Assessment",
Â  Â  Â  Â  description: "Coding problems + work simulation + logical reasoning test.",
Â  Â  Â  },
Â  Â  Â  {
Â  Â  Â  Â  round: "Technical Round",
Â  Â  Â  Â  description: "Coding + problem solving based on Amazon Leadership Principles.",
Â  Â  Â  },
Â  Â  Â  {
Â  Â  Â  Â  round: "Managerial Round",
Â  Â  Â  Â  description: "Scenario-based questions, system design, and team fit discussion.",
Â  Â  Â  },
Â  Â  Â  {
Â  Â  Â  Â  round: "HR Round",
Â  Â  Â  Â  description: "Offer negotiation and final fit assessment.",
Â  Â  Â  },
Â  Â  ],
Â  Â  questions: [
Â  Â  Â  Â  { q: "Tell me about a time you had to deal with a difficult customer.", a: "Frame your answer using the STAR method (Situation, Task, Action, Result) and tie it to the 'Customer Obsession' leadership principle." },
Â  Â  Â  Â  { q: "Design the recommendation system for Amazon.com.", a: "Discuss collaborative filtering, content-based filtering, and hybrid models. Mention scalability and cold-start problems." },
Â  Â  Â  Â  { q: "Given a binary tree, check if it is a valid Binary Search Tree (BST).", a: "Explain the recursive approach with a min/max range or an in-order traversal method." },
Â  Â  ],
Â  },
Â  {
Â  Â  name: "Microsoft",
Â  Â  eligibility: "Pursuing a degree (BS, MS, or PhD) in a relevant technical discipline. Strong coding and problem-solving skills are essential.",
Â  Â  process: [
Â  Â  Â  {
Â  Â  Â  Â  round: "Online Test",
Â  Â  Â  Â  description: "MCQs + coding problems on DS/Algo, time complexity questions.",
Â  Â  Â  },
Â  Â  Â  {
Â  Â  Â  Â  round: "Technical Rounds",
Â  Â  Â  Â  description: "One or two coding interviews focusing on problem-solving and design.",
Â  Â  Â  },
Â  Â  Â  {
Â  Â  Â  Â  round: "Final HR",
Â  Â  Â  Â  description: "Behavioral questions and offer discussion.",
Â  Â  Â  },
Â  Â  ],
Â  Â  questions: [
Â  Â  Â  Â  { q: "Why do you want to work for Microsoft?", a: "Align your personal goals with Microsoft's mission, products (like Azure, Office 365), and company culture." },
Â  Â  Â  Â  { q: "Reverse a linked list.", a: "Provide both iterative (using three pointers: prev, current, next) and recursive solutions." },
Â  Â  Â  Â  { q: "Explain the difference between a process and a thread.", a: "A process is an instance of a program with its own memory space, while threads are components of a process that share memory." },
Â  Â  ],
Â  },
];

// API call function remains the same, but now it will receive an array
const fetchAIQuestionsAndAnswers = async (topic) => {
Â  Â  try {
Â  Â  Â  Â  const response = await fetch(`http://localhost:5000/api/interview/generate`, {
Â  Â  Â  Â  Â  Â  method: 'POST',
Â  Â  Â  Â  Â  Â  headers: { 'Content-Type': 'application/json' },
Â  Â  Â  Â  Â  Â  body: JSON.stringify({ topic }),
Â  Â  Â  Â  });
Â  Â  Â  Â  if (!response.ok) {
Â  Â  Â  Â  Â  Â  console.error("Failed to fetch Q&A. Status:", response.status);
Â  Â  Â  Â  Â  Â  return []; // Return empty array on failure
Â  Â  Â  Â  }
Â  Â  Â  Â  return await response.json(); // Expects an array of objects
Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("An error occurred while fetching Q&A:", error);
Â  Â  Â  Â  return [];
Â  Â  }
};

const Interview = () => {
Â  Â  const [selectedCompany, setSelectedCompany] = useState(companies[0]);
Â  Â  const [searchQuery, setSearchQuery] = useState("");
Â  Â  
Â  Â  // --- STATE UPDATED to handle an array of results ---
Â  Â  const [aiResults, setAiResults] = useState([]); 
Â  Â  const [isLoading, setIsLoading] = useState(false);
Â  Â  const [searchPerformed, setSearchPerformed] = useState(false);
Â  Â  const [error, setError] = useState("");
Â  Â  const [activeAccordion, setActiveAccordion] = useState(null); // To control the accordion

Â  Â  const handleSearch = async (e) => {
Â  Â  Â  Â  e.preventDefault();
Â  Â  Â  Â  if (!searchQuery) return;
Â  Â  Â  Â  setIsLoading(true);
Â  Â  Â  Â  setSearchPerformed(true);
Â  Â  Â  Â  setError("");
Â  Â  Â  Â  setAiResults([]);
Â  Â  Â  Â  setActiveAccordion(null); // Reset accordion on new search

Â  Â  Â  Â  const results = await fetchAIQuestionsAndAnswers(searchQuery);
Â  Â  Â  Â  
Â  Â  Â  Â  if (!results || results.length === 0) {
Â  Â  Â  Â  Â  Â  setError(`Could not generate questions for "${searchQuery}". Please try another topic.`);
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  setAiResults(results);
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  setIsLoading(false);
Â  Â  };

Â  Â  const toggleAccordion = (index) => {
Â  Â  Â  Â  setActiveAccordion(activeAccordion === index ? null : index);
Â  Â  };

Â  Â  return (
Â  Â  Â  Â  <main className="bg-slate-50 text-slate-800 dark:bg-slate-900 dark:text-slate-100 transition-colors duration-300">
Â  Â  Â  Â  Â  Â  <div className="max-w-5xl mx-auto p-6">
Â  Â  Â  Â  Â  Â  Â  Â  <h1 className="text-3xl font-bold text-cyan-700 dark:text-cyan-400 mb-6">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Company Interview Hub
Â  Â  Â  Â  Â  Â  Â  Â  </h1>
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  {/* AI Search Section */}
Â  Â  Â  Â  Â  Â  Â  Â  <div className="mb-8 p-5 bg-white dark:bg-gray-900 border border-gray-300 dark:border-gray-700 rounded-lg shadow">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-xl font-semibold mb-3 text-cyan-700 dark:text-cyan-400">AI Interview Question Generator</h2>
                    <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Enter any topic to generate a practice question with a detailed answer.
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <form onSubmit={handleSearch} className="flex flex-col sm:flex-row gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={searchQuery}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setSearchQuery(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="e.g., React Hooks"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="flex-grow p-2 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-cyan-500 focus:outline-none"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  _ Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="submit"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={isLoading}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="px-5 py-2 rounded-md bg-cyan-600 text-white font-semibold hover:bg-cyan-700 disabled:bg-cyan-400"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {isLoading ? "ðŸ§  Generating..." : "Generate Q&A"}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </form>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* --- UI UPDATED to display a list of questions in an accordion --- */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {searchPerformed && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="mt-6">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {isLoading ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-cyan-600 dark:text-cyan-400">Generating questions from AI...</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : aiResults.length > 0 ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="space-y-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-lg font-bold mb-2">Generated Questions for "{searchQuery}"</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {aiResults.map((item, index) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div key={index} className="border border-gray-200 dark:border-gray-700 rounded-md">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  _ Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => toggleAccordion(index)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full flex justify-between items-center p-4 text-left font-semibold text-gray-800 dark:text-gray-200 bg-gray-50 dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>{item.question}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className={`transform transition-transform duration-300 ${activeAccordion === index ? 'rotate-180' : ''}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  â–¼
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {activeAccordion === index && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="p-4 bg-white dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="whitespace-pre-wrap text-gray-700 dark:text-gray-300">{item.answer}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-red-500">{error}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  {/* --- COMPANY DETAILS SECTION (remains the same) --- */}
Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-2xl font-semibold mb-3">Company-Specific Information</h2>
Â  Â  Â  Â  Â  Â  Â  Â  {/* ... rest of your JSX is the same ... */}
Â  Â  Â  Â  Â  Â  Â  Â  Â <div className="flex flex-wrap gap-3 mb-6">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {companies.map((company) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={company.name}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setSelectedCompany(company)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`px-4 py-2 rounded-lg border text-sm font-medium transition
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ${selectedCompany.name === company.name
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? "bg-cyan-600 text-white border-cyan-600"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : "bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 border-gray-300 dark:border-gray-700 hover:bg-cyan-50 dark:hover:bg-gray-700"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {company.name}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  {/* Selected Company Details */}
Â  Â  Â  Â  Â  Â  Â  Â  <div className="bg-white dark:bg-gray-900 border border-gray-300 dark:border-gray-700 rounded-lg p-5 shadow space-y-6">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-2xl font-semibold text-cyan-700 dark:text-cyan-400">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {selectedCompany.name}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </h2>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Eligibility */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-xl font-bold mb-2">Eligibility Criteria</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-700 dark:text-gray-300">{selectedCompany.eligibility}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Interview Process */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-xl font-bold mb-2">Interview Process</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ol className="space-y-4 list-decimal list-inside">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {selectedCompany.process.map((step, index) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <li key={index} className="text-gray-900 dark:text-gray-100">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="font-semibold inline">{step.round}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-700 dark:text-gray-300 ml-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {step.description}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </li>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </ol>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Common Questions */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-xl font-bold mb-2">Commonly Asked Questions</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ul className="space-y-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {selectedCompany.questions.map((item, index) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <li key={index} className="p-3 bg-slate-50 dark:bg-slate-800 rounded-md border border-slate-200 dark:border-slate-700">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="font-semibold text-gray-900 dark:text-gray-100">{item.q}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-700 dark:text-gray-300 mt-1">{item.a}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </li>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </ul>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </main>
Â  Â  );
};

export default Interview;
